<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://1in.ink:4000/atom.xml" rel="self"/>
  
  <link href="http://1in.ink:4000/"/>
  <updated>2023-05-28T11:54:50.817Z</updated>
  <id>http://1in.ink:4000/</id>
  
  <author>
    <name>1in</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React中使用Hooks的正确姿势</title>
    <link href="http://1in.ink:4000/2023/05/28/React%E4%B8%AD%E4%BD%BF%E7%94%A8Hooks%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
    <id>http://1in.ink:4000/2023/05/28/React%E4%B8%AD%E4%BD%BF%E7%94%A8Hooks%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</id>
    <published>2023-05-28T11:47:06.808Z</published>
    <updated>2023-05-28T11:54:50.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5678f6490cc347fa9f71c0272caf27eb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%" />Hooks是React为函数式组件提供的工具箱，可以由开发者自由搭配，这也是React的函数式组件轻量的原因。<p>Class组件固然好，但是用于解决小规模问题，犹如大炮打蚊子，太过于繁重，函数式组件的出现，就解决了这一问题。</p><p>所以就Hooks而言对函数式组件的重要是不言而喻的。</p><p>现如今React官方也推崇函数式组件，React的理念就是吃进数据吐出视图（数据驱动视图），函数式组件正好印证了这一点。</p><p>下面就由我来总结一下在React函数式组件中使用Hooks的正确姿势。</p><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p><strong>为函数式组件解决了无法实现管理状态的缺点</strong></p><ol><li>不可以在<strong>循环&#x2F;判断</strong>语句中使用，因为useState的底层实现是以链表的形式实现，更新是以批量更新的方式去更新，如果在<strong>循环和&#x2F;判断语句中去使用</strong>会破坏链表的更新顺序，使得更新混淆等问题。</li><li>useState是异步更新（只要state还在React的掌控之中就是异步更新的，SetTimeout会帮助state逃脱React的掌控），如果需要同步更新请使用<strong>flushSync</strong>这个官方推出的API（非必要不建议同步更新），因为每一次的state更新就去改变视图，则会频繁更新，浪费性能，React在每一次的state更新时，暂存这个state，当state改变完时，则会去完成批量更新。</li></ol><h2 id="useEffect和useLayoutEffect"><a href="#useEffect和useLayoutEffect" class="headerlink" title="useEffect和useLayoutEffect"></a>useEffect和useLayoutEffect</h2><p><strong>为函数式组件解决了没有生命周期的缺点（可以模拟生命周期）</strong></p><ol><li>主要模拟三个生命周期，componentDidMount（组件挂载后，第二个参数为[]）、componentDidUpdate（组件更新后，第二个参数为[需要监听的属性值]）、componentDidUnmount（组件销毁后，通过return返回函数）</li><li>第二个参数为浅层比较，不要传递对象进行比较。</li><li>useLayoutEffect的出现顾名思义就是为了解决布局而出现的，它的触发时机在DOM更新之前获取DOM元素并且执行，所以它是同步渲染的。</li><li>useEffect，它的触发时机是DOM更新之后获取DOM元素并且执行，所以它是异步渲染的，React官方推荐我们在useEffect解决不了的场景下再去使用useLayoutEffect，但是我们需要明白，两个Hooks的执行时机不同，并且时间也不同，一个是异步渲染，一个是同步渲染。</li><li>一般向后端发送请求时，常常使用useEffect模拟componentDidMount这个生命周期去发送请求。</li></ol><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><p><strong>为函数式组件提供缓存函数的功能</strong></p><ol><li>当我们使用React.memo缓存组件时，如果我们用父组件向这个子组件传递了一个函数，因为函数是引用数据类型，当父组件每一次更新时，这个函数的引用都会改变，所以这个时候我们就需要去用useCallBack缓存这个函数搭配React.memo避免子组件重复渲染。</li><li>同样，第二个参数为浅层比较，不要传递对象进行比较。</li></ol><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><p><strong>为函数式组件提供缓存数据的功能</strong></p><ol><li>当我们通过属性计算出一个属性时，我们可以使用useMemo这个Hooks缓存这个计算出的属性，避免组件刷新时，重复计算，达到性能优化的作用。</li><li>同样，第二个参数为浅层比较，不要传递对象进行比较。</li></ol><h2 id="函数式组件需要避免的问题"><a href="#函数式组件需要避免的问题" class="headerlink" title="函数式组件需要避免的问题"></a>函数式组件需要避免的问题</h2><p>因为函数式组件每一次渲染都会重新执行，所以需要将常量放到函数外部，避免重复定义，浪费性能，如果定义的是一个常量函数，且需要用到函数内部的变量做计算，那么一定要用到useCallback缓存这个函数。</p><h3 id="React-memo-VS-React-useMemo"><a href="#React-memo-VS-React-useMemo" class="headerlink" title="React.memo VS React.useMemo"></a>React.memo VS React.useMemo</h3><p>React.memo是一个高阶组件，它的作用类似于React.pureComponent，但在Hooks的场景下，更推荐使用React.useMemo。</p><p>可以通过分拆组件的方式阻断重渲染，但使用React.useMemo可以实现更精细化的控制。</p><p>考虑到更宽广的使用场景和维护性，推荐使用React.useMemo。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;img src=&quot;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5678f6490cc34</summary>
      
    
    
    
    <category term="前端" scheme="http://1in.ink:4000/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="http://1in.ink:4000/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks-useState逻辑实现</title>
    <link href="http://1in.ink:4000/2023/05/28/React%20Hooks-useState%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/"/>
    <id>http://1in.ink:4000/2023/05/28/React%20Hooks-useState%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-05-28T11:46:24.482Z</published>
    <updated>2023-05-28T11:46:55.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/517040d5c49445ac955147e113e61ee1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>在React中，我们经常使用useState这个Hooks，那么这个Hooks的实现逻辑是怎样的呢，下边我总结了一下这个Hooks的实现逻辑。</p><h2 id="关于useState"><a href="#关于useState" class="headerlink" title="关于useState"></a>关于useState</h2><p>useState是在函数式组件中用来管理状态的一个Hooks，弥补了函数式组件没有状态这一缺点。</p><p>在React中，state是以链表的形式存在，并在每一次的更新时，实现state批量更新，也就是说，在React中，当state变化时，会先暂存在更新最后统一实现。</p><p><strong>注意</strong>useState不可以在if这样的条件语句中使用，否则会出现批量更新混淆错误。这也是React官方严厉禁止的。</p><h2 id="useState实现逻辑"><a href="#useState实现逻辑" class="headerlink" title="useState实现逻辑"></a>useState实现逻辑</h2><p>首先，我们要明白，useState是通过return出一个数组，这个数组有两个参数，第一个参数是维护的状态值，第二个参数是改变状态值的函数。</p><h3 id="为什么useState不返回一个对象而返回一个数组呢？"><a href="#为什么useState不返回一个对象而返回一个数组呢？" class="headerlink" title="为什么useState不返回一个对象而返回一个数组呢？"></a>为什么useState不返回一个对象而返回一个数组呢？</h3><p>因为返回值为数组时，结构时可以直接起别名，而用对象解构时，起别名的过程需要:（冒号）,这样就会繁琐。</p><h3 id="useState的结构"><a href="#useState的结构" class="headerlink" title="useState的结构"></a>useState的结构</h3><p>通过React源码，我们可以发现，useState中是用链表的形式存储着state，所以当我们实现逻辑复现的时候，就得需要通过数组去存储state值和setState函数（简单的逻辑复现暂时用数组）。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyReact</span>=(</span><br><span class="line">    <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> states =[ ]</span><br><span class="line">        <span class="keyword">const</span> stateSetters=[]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> stateIndex=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">createState</span>(<span class="params">initialState,stateIndex</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> states[stateIndex]!==<span class="literal">undefined</span> ? states[stateIndex] : initialState</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">createStateSetters</span>(<span class="params">stateIndex</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">newState</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">typeof</span> newState===<span class="string">&quot;function&quot;</span>)&#123;</span><br><span class="line">                    states[stateIndex]=<span class="title function_">newState</span>(states[stateIndex])</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    states[stateIndex]=newState</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="title function_">render</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">useState</span>(<span class="params">initialState</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span>  _state=<span class="title function_">createState</span>(initialState,stateIndex)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!stateSetters[stateIndex])&#123;</span><br><span class="line">                stateSetters.<span class="title function_">push</span>(<span class="title function_">createStateSetters</span>(stateIndex))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> _setState=stateSetters[stateIndex]</span><br><span class="line"></span><br><span class="line">            stateIndex++</span><br><span class="line">            <span class="keyword">return</span> [_state,_setState]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">            stateIndex=<span class="number">0</span></span><br><span class="line">            <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            useState</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;useState&#125;=<span class="title class_">MyReact</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> [count,setCount]=<span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123;setCount(count+1)&#125;&#125;&gt;ADD +1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们逐步分析源码。</p><p>我们都知道，使用useState时需要传入一个init值，所以我们需要接收一个init值，通过createState这个函数，将init值保存在states数组中。在这里，需要做一个判断，如果不等于undefined时，将值设置为**states[stateIndex]**（防止重复初始化，因为render函数调用后，重新执行useState，我们需要保留render调用前的状态值）。</p><p>在createStateSetters函数中，根据传入的newState值，返回顶一个setState。</p><p>useState的第二个参数，有两种传参形式，一种是传入一个值，一种是传入一个函数，所以我们得需要typeof判断一下是否传入的参数是函数，如果是函数，我们就调用这个函数，并且将这个函数的返回值赋值给states[stateIndex]，如果不是函数，则直接将newState值赋值给states[stateIndex]。</p><p>当我们执行一次useState函数值后，将stateIndex+1，确保下一次的useState函数可以正常的将state和setState存入到正确的数组位置。</p><p>最后，我们需要在每一次的render函数调用时，将stateIndex重置为0，因为render函数调用后会重新执行useState。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/517040d5c4</summary>
      
    
    
    
    <category term="前端" scheme="http://1in.ink:4000/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="http://1in.ink:4000/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Fiber架构</title>
    <link href="http://1in.ink:4000/2023/05/28/React%20Fiber%E6%9E%B6%E6%9E%84/"/>
    <id>http://1in.ink:4000/2023/05/28/React%20Fiber%E6%9E%B6%E6%9E%84/</id>
    <published>2023-05-28T11:45:35.591Z</published>
    <updated>2023-05-28T11:52:38.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9449275c49dd47609943a39b8c2f087a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%" />在了解React Fiber架构之前，我们得从React 15中的栈调和（stack Reconciler）入手。<p>在React15中，因为使用的是不可打断stack Reconciler的同步渲染，所以当调和时间很长时间，就会导致Javascript线程长时间霸占主线程，进而导致渲染卡顿、卡死、交互时间长时间无响应等问题，所以React团队在React16做出了改变-Fiber。</p><h2 id="React-调和过程是怎样的"><a href="#React-调和过程是怎样的" class="headerlink" title="React 调和过程是怎样的"></a>React 调和过程是怎样的</h2><p><strong>调和（Reconciliation），又译为 协调。</strong></p><h3 id="React调和与diff算法"><a href="#React调和与diff算法" class="headerlink" title="React调和与diff算法"></a>React调和与diff算法</h3><p>调和指的是将虚拟 DOM 映射到真实 DOM 的过程，Diff 过程只是其中一个环节。</p><p>React 源码结构佐证了这一点：React 从大的板块上将源码划分为 Core、Renderer、Reconciler 三部分。</p><p>其中 Reconciler 调和器所做的工作是一系列的，包括组件的挂载、卸载、更新等过程，其中更新过程涉及对 Diff 算法的调用。</p><p>所以，<code>调和 !== Diff</code>。但 Diff 确实是调和过程中最具有代表性的一环。</p><p>根据 Diff 实现形式的不同，调和过程被划分为 以 React 15 为主的”栈调和” 以及 以 React 16 为主的”Fiber 调和”。</p><h3 id="React-15"><a href="#React-15" class="headerlink" title="React 15"></a>React 15</h3><p>当我们通过<code>render</code>和<code>setState</code>进行组件渲染和更新的时候，<code>React</code>主要有两个阶段：</p><ul><li><strong>协调阶段Reconciler</strong>：通过<code>diff</code>算法递归比较新旧两棵虚拟<code>dom</code>树，计算出需要改变的部分<code>patch</code>。</li><li><strong>渲染阶段Renderer</strong>：负责将<code>patch</code>批量更新到真实<code>dom</code>。</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c39f3f10123460a80cbdacafd742dc8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="React-16"><a href="#React-16" class="headerlink" title="React 16"></a>React 16</h3><p><code>react 16</code>新增<strong>Scheduler</strong>阶段；并且重构了<strong>Reconciler</strong>，即 <strong><code>Fiber</code> Reconciler</strong>。</p><ul><li><strong>调度器Scheduler</strong>：调度任务的执行，优先级高的任务会先进入协调阶段。</li><li><strong>协调器Reconciler</strong>：负责找出变化的组件，可以中断更新过程。</li><li><strong>渲染器Renderer</strong>：负责将变化的组件渲染到页面上。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/408e614fc1584ac4ac480835cc5f5111~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="Fiber架构是如何解决问题的"><a href="#Fiber架构是如何解决问题的" class="headerlink" title="Fiber架构是如何解决问题的"></a>Fiber架构是如何解决问题的</h2><p>Fiber架构的应用目的是实现“增量渲染”</p><p>实现增量渲染的目的，是为了实现任务的可中断，可恢复，并给不同的任务赋予不同的优先级，最终达成更加顺滑的用户体验。</p><p>Fiber架构的重要特征就是可以被打断的异步渲染模式，Fiber架构的核心就是：可中断、可恢复与优先级，每个更新任务都会被赋予一个优先级，若发现B的优先级高于当前任务A的优先级，那么当前处于Reconciler层的A任务就会被打断，将B任务推进Reconciler层，当B任务调和完成时，根据优先级排序，A任务将会重新推入Reconciler层，继续它的渲染之旅，这便是可恢复。</p><p> 每一个工作单元都接受Scheduler（调度器）的优先级调度。</p><h2 id="Fiber架构中的diff算法"><a href="#Fiber架构中的diff算法" class="headerlink" title="Fiber架构中的diff算法"></a>Fiber架构中的diff算法</h2><h3 id="fiber-node"><a href="#fiber-node" class="headerlink" title="fiber node"></a>fiber node</h3><p> 在React中，每一个React元素都会有对应的一个fiber node，与React元素不同的是，fiber node不会在每一次渲染时重新创建这些fiber node。</p><h3 id="fiber-tree"><a href="#fiber-tree" class="headerlink" title="fiber tree"></a>fiber tree</h3><p> fiber tree是一个链表结构，它通过<code>fiber</code>节点的<code>return、child、sibling</code>属性进行连接。</p><h3 id="current-Tree、workInProgress-Tree"><a href="#current-Tree、workInProgress-Tree" class="headerlink" title="current Tree、workInProgress Tree"></a>current Tree、workInProgress Tree</h3><p>在 React 中最多存在两颗 Fiber 树，当前屏幕上 DOM 结构对相应的 Fiber 树称为 current Fiber 树(首次渲染时会得到第一个Fiber树)，在内存中构建的 Fiber 树称为 workInProgress Fiber 树。其中，Diff 算法的计算过程就是生成 workInProgress Fiber 树的过程，每次页面状态更新都会产生新的 workInProgress Fiber 树，当 workInProgress Fiber 树构建完成后交给 Renderer 渲染在页面上，之后在 React 中使用根节点的 current 指针完成由 current Fieber 树到 workInProgress Fiber 树的切换，此时</p><p>workInProgress Fiber 树就成为了 current Fiber 树，完成 DOM 更新。</p><h3 id="如何构建workInProgress-Tree"><a href="#如何构建workInProgress-Tree" class="headerlink" title="如何构建workInProgress Tree"></a>如何构建workInProgress Tree</h3><p>Diff 算法的本质是对比 JSX 对象和 current Fiber 节点，然后根据对比结果生成 workInProgress Fiber 节点，进而生成</p><p>workInProgress Fiber 树。其中需要执行相关操作的 Fiber 节点将会被打上 flags 标记，之后 Renderer 渲染器基于 Diff 过程中打上 flags 标记的 Fiber 节点<strong>链接</strong>成的<strong>链表</strong>进行相关的 DOM 操作。</p><p>所以在构建workInProgress Fiber时我们也会复用current Fiber未发生改变的fiber node，如果对比current Fiber和JSX对象，得到有差异的fiber node则会重新创建（不会复用）。</p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul><li><strong>在构建<code>Fiber</code>树的过程中，<code>Fiber Reconciler</code>会将需要更新的节点信息保存在<code>Effect List</code>当中，在<code>commit</code>阶段时进行批量更新。</strong></li><li>构建<code>workInProgress tree</code>的过程就是<code>diff</code>的过程，通过<code>requestIdleCallback</code>来调度执行一组任务。</li></ul><h2 id="Renderer（渲染）"><a href="#Renderer（渲染）" class="headerlink" title="Renderer（渲染）"></a>Renderer（渲染）</h2><h3 id="commit阶段"><a href="#commit阶段" class="headerlink" title="commit阶段"></a>commit阶段</h3><p>处理<code>Effect List</code>：包含更新<code>dom</code>、调用组件生命周期函数、更新<code>ref</code>等内部状态。</p><h3 id="注意！！！"><a href="#注意！！！" class="headerlink" title="注意！！！"></a>注意！！！</h3><p><strong>commit</strong>阶段是不可中断的，是一次执行完成的，此阶段不能暂停，否则会出现UI更新不连续的现象。此阶段需要根据effect list，将所有更新都 commit 到DOM树上。（因为Reconciler是在用户察觉不到的情况下运行，所以可中断、可恢复影响不到用户体验）。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>相较于 React15，React16 利用 Scheduler 和基于 Fiber 节点的链表结构的虚拟 DOM 实现了可中断异步 DOM 更新，改善了页面 DOM 层级过深时造成的页面卡顿现象。React16 中的虚拟 DOM 树是由 Fiber 节点链接成的 Fiber 树，其中的每一个 Fiber 节点都有与之相对应的真实 DOM 节点。</li><li>在 React 中最多存在两颗 Fiber 树，current Fiber 树和 workInProgress Fiber 树，Diff 算法的本质就是对比 current Fiber 节点和 JSX 对象，然后生成 workInProgress Fiber 树。根据同级的节点数量将 Diff 算法分为两类，单节点 Diff 和多节点 Diff。</li><li><code>调和 !== Diff</code>。但 Diff 确实是调和过程中最具有代表性的一环。</li><li><strong>commit</strong>阶段是不可中断的，是一次执行完成的，此阶段不能暂停，否则会出现UI更新不连续的现象。此阶段需要根据effect list，将所有更新都 commit 到DOM树上。（因为Reconciler是在用户察觉不到的情况下运行，所以可中断、可恢复影响不到用户体验）。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;img src=&quot;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9449275c49dd4</summary>
      
    
    
    
    <category term="前端" scheme="http://1in.ink:4000/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="http://1in.ink:4000/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React15的三个Will生命周期为什么会在Fiber出现后被废弃</title>
    <link href="http://1in.ink:4000/2023/05/28/React15%E7%9A%84%E4%B8%89%E4%B8%AAWill%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%9C%A8Fiber%E5%87%BA%E7%8E%B0%E5%90%8E%E8%A2%AB%E5%BA%9F%E5%BC%83/"/>
    <id>http://1in.ink:4000/2023/05/28/React15%E7%9A%84%E4%B8%89%E4%B8%AAWill%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%9C%A8Fiber%E5%87%BA%E7%8E%B0%E5%90%8E%E8%A2%AB%E5%BA%9F%E5%BC%83/</id>
    <published>2023-05-28T11:44:29.802Z</published>
    <updated>2023-05-28T11:53:54.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07b352c9afa74a6680f92c4f396ea7a4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>React16出现Fiber之后就废弃了React15中的三个Will生命周期钩子，并新推出两个生命周期钩子，具体原因我们得从生命周期和Fiber架构具体了解。</p><h3 id="React15生命周期"><a href="#React15生命周期" class="headerlink" title="React15生命周期"></a>React15生命周期</h3><p>在React15中，组件的生命周期分为三大类，组件挂载、组件更新、组件卸载。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a656a71c94af420881f275ee912c7613~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%" /></p><h4 id="组件挂载"><a href="#组件挂载" class="headerlink" title="组件挂载"></a>组件挂载</h4><p>在组件挂载时，触发两个生命周期的钩子，分别是componentWillMount（组件挂载前）、componentDidMount（组件挂载后），一般的请求都放在componentDidMount中。</p><h4 id="组件更新"><a href="#组件更新" class="headerlink" title="组件更新"></a>组件更新</h4><p>在组件更新时，首先会调用componentWillReceiveProps这个生命周期钩子，那么这个生命周期钩子的执行时机是什么时候呢？如果我们从这个钩子的名字来看，当组件接收的props值发生改变时，这个生命周期钩子会执行，这样的答案对也不对，正确的执行时机应该是父组件重新渲染时，会调用这个钩子。</p><p>其次，会根据shouldComponentUpdate这个钩子的返回值来判断是否更新，开发者也可以通过这个钩子来决定组件是否更新，随后就是componentWillUpdate和componentDidUpdate，分别是组件更新前和更新后的生命周期钩子</p><h4 id="组件卸载"><a href="#组件卸载" class="headerlink" title="组件卸载"></a>组件卸载</h4><p>在组件卸载时，会调用componentWillUnmount这个生命周期钩子</p><h3 id="React16生命周期"><a href="#React16生命周期" class="headerlink" title="React16生命周期"></a>React16生命周期</h3><p>在React16中，组件的生命周期也分为三大类，组件挂载，组件更新，组件卸载，与React15不同的是因为Fiber的引入，删除了三个Will生命周期的钩子，引入了两个getDerivedStateFromProps和getSnapshotBeforeUpdate。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75d3c7a1b9e24f18b0d184dd22fa5d13~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%" /><p>getDerivedStateFromProps 会在调用 render 方法之前调用，即在渲染 DOM 元素之前会调用，并且在初始挂载及后续更新时都会被调用。</p><h4 id="getDerivedStateFromProps"><a href="#getDerivedStateFromProps" class="headerlink" title="getDerivedStateFromProps"></a>getDerivedStateFromProps</h4><p>static getDerivedStateFromProps(props, state)</p><p>state 的值在任何时候都取决于 props。</p><p>getDerivedStateFromProps 的存在只有一个目的：让组件在 props 变化时更新 state。</p><p>该方法返回一个对象用于更新 state，如果返回 null 则不更新任何内容。</p><p>getDerivedStateFromProps是一个静态方法</p><p>注意！！！</p><p>getDerivedStateFromProps不是componentWillMount的替代品，componentWillMount的存在不仅“鸡肋”而且危险，因此它不值得被“代替”，它就应该被废弃，getDerivedStateFromProps有且仅有一个用途：使用props来派生&#x2F;更新state</p><p>React团队直接从命名层面约束了它的用途，getDerivedStateFromProps在更新和挂载两个阶段都会“出境”</p><p>getDerivedStateFromProps方法对state的更新动作并非“覆盖”式的更新，而是针对某个属性的定向更新</p><p>getDerivedStateFromProps是作为一个试图代替componentWillReceiveProps的API而出现的</p><p>getDerivedStateFromProps不能完全和componentWillReceiveProps划等号</p><h4 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate"></a>getSnapshotBeforeUpdate</h4><p>getSnapshotBeforeUpdate() 方法在最近一次渲染输出（提交到 DOM 节点）之前调用。</p><p>在 getSnapshotBeforeUpdate() 方法中，我们可以访问更新前的 props 和 state。</p><p>getSnapshotBeforeUpdate() 方法需要与 componentDidUpdate() 方法一起使用，否则会出现错误。</p><h2 id="为什么出现Fiber"><a href="#为什么出现Fiber" class="headerlink" title="为什么出现Fiber"></a>为什么出现Fiber</h2><p>在React15中，因为使用的是不可打断stack Reconciler的同步渲染，所以当调和时间很长时间，就会导致Javascript线程长时间霸占主线程，进而导致渲染卡顿、卡死、交互时间长时间无响应等问题，所以React团队在React16做出了改变-Fiber</p><h3 id="Fiber是如何解决问题的"><a href="#Fiber是如何解决问题的" class="headerlink" title="Fiber是如何解决问题的"></a>Fiber是如何解决问题的</h3><p>因为stack Reconciler是一个宏大的任务且是深度遍历，避免不了长时间霸占主线程，所以Fiber就将一个宏大的任务差分成许多工作单元，每个工作单元都有自己的优先级，每个工作单元都是可中断、可恢复的</p><p>所以Fiber架构由原先的Reconciler、Renderer两层变为了Scheduler、Reconciler、Renderer三层</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ba2f5c0f73743b4b7425dd0c3723a3b~tplv-k3u1fbpfcp-watermark.image" alt="95a3b93cd26c70b77f0f6735020451c.jpg"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e108b30b7fe74335ba6dd15e1e1010ab~tplv-k3u1fbpfcp-watermark.image" alt="bd53e295df3871f70b3d51fb1ff7aa9.jpg"></p><p>Fiber架构的应用目的是实现“增量渲染”</p><p>实现增量渲染的目的，是为了实现任务的可中断，可恢复，并给不同的任务赋予不同的优先级，最终达成更加顺滑的用户体验</p><p>Fiber架构的重要特征就是可以被打断的异步渲染模式，Fiber架构的核心就是：可中断、可恢复与优先级，每个更新任务都会被赋予一个优先级，若发现B的优先级高于当前任务A的优先级，那么当前处于Reconciler层的A任务就会被打断，将B任务推进Reconciler层，当B任务调和完成时，根据优先级排序，A任务将会重新推入Reconciler层，继续它的渲染之旅，这便是可恢复。</p><h2 id="废弃三个Will钩子的原因"><a href="#废弃三个Will钩子的原因" class="headerlink" title="废弃三个Will钩子的原因"></a>废弃三个Will钩子的原因</h2><p>componentWillMount、componentWillUpdate、componentWillReceiveProps这三个钩子常年被开发者滥用，是产生副作用的重灾区，在Fiber中，因为所有的工作单元都是可中断，可继续的，所以会导致这三个钩子重复调用，导致不可想象的局面，所以这三个钩子随着Fiber的出现废弃是必然的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07b352c9af</summary>
      
    
    
    
    <category term="前端" scheme="http://1in.ink:4000/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="http://1in.ink:4000/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>迭代器（iterator）、可迭代对象、生成器（generator）到底是什么</title>
    <link href="http://1in.ink:4000/2023/05/28/ES%20Modules%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://1in.ink:4000/2023/05/28/ES%20Modules%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2023-05-28T11:43:28.928Z</published>
    <updated>2023-05-28T11:44:18.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在JS初期，JS没有模块化时，团队分工合作问题以及变量作用域问题很是问题，随后在JS社区衍生出AMD、CMD、CommonJS等模块化规范，<a href="https://juejin.cn/post/7205508171524096060">关于CommonJS的实现原理可以参考我这篇</a>，现如今，AMD、CMD的使用逐渐变少，应用广泛的就是CommonJS和ES modules，ES modules是ECMA官方定义的模块化语法。</p><h2 id="使用陷阱"><a href="#使用陷阱" class="headerlink" title="使用陷阱"></a>使用陷阱</h2><p>在没有脚手架的帮助下，我们使用ES modules时，在HTML文件中引入script标签时，需要加上type&#x3D;”module”属性，表示script使用方法为模块化。</p><h3 id="HTML文件中引入方法"><a href="#HTML文件中引入方法" class="headerlink" title="HTML文件中引入方法"></a>HTML文件中引入方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./foo.js&quot;</span> type=<span class="string">&quot;module&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="JS文件中使用方法"><a href="#JS文件中使用方法" class="headerlink" title="JS文件中使用方法"></a>JS文件中使用方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bar.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name=<span class="string">&quot;1in&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age=<span class="number">20</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//foo.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name,age&#125; <span class="keyword">from</span> <span class="string">&quot;./bar&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>打开浏览器，看一下console.log出我们想要的结果出来没</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82bcda331af44df4b0a5d31d4ef1d765~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>得到了我们想要的结果。但是！！！ 注意，因为我使用的编译器是Webstrom，所以我运行html文件时，Webstrom会帮我自动开启一个服务端口运行此文件，但是我们都知道，本地双击html文件也是可以用浏览器打开的，这个时候，就会报错，所以，我们在VScode中就会遇到这种情况。</p><h3 id="解决VScode报错问题"><a href="#解决VScode报错问题" class="headerlink" title="解决VScode报错问题"></a>解决VScode报错问题</h3><p>我们只需要安装一个插件，安装之后，在html文件中右键用这个插件打开即可。</p><p>在VScode中搜索 <strong>Live Server</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19e8b68deefa421d9d8363f331f08379~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="为什么报错"><a href="#为什么报错" class="headerlink" title="为什么报错"></a>为什么报错</h3><p>MDN中是这样解释的。</p><p>MDN： 如果你尝试用本地文件加载 HTML 文件 (i.e. with a <code>file://</code> URL)，由于 JavaScript 模块的安全性要求，你会遇到 CORS 错误。你需要通过服务器来做你的测试。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/876cad088cb048e9bbab7042dd1163e0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>ES Module是如何被浏览器解析并且让模块之间可以互相引用的呢？</p><p>ES Module的解析过程可以划分为三个阶段。</p><ol><li>构建（Construction），根据地址查找js文件，并且下载，将其解析成模块记录（Module Record）；</li><li>实例化（Instantiation），对模块记录进行实例化，并且分配内存空间，解析模块的导入和导出语句，把模块指向对应的内存地址；</li><li>运行（Evaluation），运行代码，计算值，并且将值填充到内存地址中；</li></ol><p>在构建时，浏览器会静态扫描每个js文件的import语句（不会执行代码），所以我们的import语句不能写在类似于if语句这种需要动态判断的代码之中，import函数除外，扫描到import语句后，开始下载每一个js文件，下载好的js文件会parse成一个Module Record，同时下载过程中，还会生成一个Module Map的表，会记录已经下载的js文件和正在下载的js文件，避免重复引入。</p><p>当所有的js文件构建成Module Record后，就会开始实例化阶段和运行求值阶段，每一个Module Record会实例化一个Module Environment Record，将自己导出的值绑定（Bindings）到Module Environment Record（内存地址）中，同时，需要导入js文件的Module Record也会将自己需要导入的值绑定（Bindings）到Module Environment Record（内存地址）中，在这个地址内存中，导入、导出自己对应的值，当然这个值，是需要求值运算过得，也就是阶段三完成后，对应的js文件就可以导入对应的值。如果导出的是数值，导入的js文件就会拿到对应的数值，如果导出的是函数或者对象，导入的js文件就会拿到对应的地址</p><h3 id="注意！！！"><a href="#注意！！！" class="headerlink" title="注意！！！"></a>注意！！！</h3><p>导出的模块是可以修改导出的值（value），导入模块是不可以修改导入的值（value）否则会报错！！！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ES Module的解析过程可以划分为三个阶段。</p><p>1.1 构建（Construction），根据地址查找js文件，并且下载，将其解析成模块记录（Module Record）；</p><p>1.2  实例化（Instantiation），对模块记录进行实例化，并且分配内存空间，解析模块的导入和导出语句，把模块指向对应的内存地址；</p><p>1.3  运行（Evaluation），运行代码，计算值，并且将值填充到内存地址中；</p><ol start="2"><li>导出的模块是可以修改导出的值（value），导入模块是不可以修改导入的值（value）否则会报错！！！ </li><li>在没有脚手架的帮助下，我们使用ES modules时，在HTML文件中引入script标签时，需要加上type&#x3D;”module”属性，表示script使用方法为模块化。</li><li>在本地使用（没有脚手架的情况下）ES modules，需要使用VScode的一个插件<strong>Live Server</strong>，而Webstrom编辑器打开时会自动创建一个服务端口。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在JS初期，JS没有模块化时，团队分工合作问题以及变量作用域问题很是问题，随后在JS社区衍生出AMD、CMD、CommonJS等模块化规范，</summary>
      
    
    
    
    <category term="前端" scheme="http://1in.ink:4000/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="http://1in.ink:4000/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>迭代器（iterator）、可迭代对象、生成器（generator）到底是什么</title>
    <link href="http://1in.ink:4000/2023/05/28/%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%88iterator%EF%BC%89%E3%80%81%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88generator%EF%BC%89%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://1in.ink:4000/2023/05/28/%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%88iterator%EF%BC%89%E3%80%81%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88generator%EF%BC%89%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2023-05-28T11:42:33.118Z</published>
    <updated>2023-05-28T11:54:59.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在JS中，我们常常需要使用async以及await语法来发送网络请求等操作，但是这个语法的背后实现原理到底是什么呢？，我们就得需要了解迭代器（iterator）、可迭代对象、生成器（generator）这些知识点也在各种开源库中，广泛应用。</p><h2 id="什么是迭代器（iterator）"><a href="#什么是迭代器（iterator）" class="headerlink" title="什么是迭代器（iterator）"></a>什么是迭代器（iterator）</h2><p>在JS中，迭代器是一个对象，这个对象中有一个next（）方法，每次调用会retrun出一个对象，这个对象中有两个参数，done（bool类型）、value（具体的属性值），当迭代未完全完成时，done的值则会一直为false，当value的值为最后一个时，下一次的next（）调用返回的done则为true，表明迭代完全完成，此时的value值为undefined。</p><p>下面则是一个简单的迭代器实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;n&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">iterator</span>=(<span class="params">obj</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> index=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index&lt;obj.<span class="property">length</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">false</span>,<span class="attr">value</span>:obj[index++]&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">true</span>,<span class="attr">value</span>:<span class="literal">undefined</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iteratorObj=<span class="title function_">iterator</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iteratorObj.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iteratorObj.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iteratorObj.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iteratorObj.<span class="title function_">next</span>())</span><br></pre></td></tr></table></figure><p>调用四次next（）方法输出结果如下</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7683be7fded5469187808cbefae332b0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>每一次调用next（）方法就会返回迭代结果。</p><h2 id="什么是可迭代对象"><a href="#什么是可迭代对象" class="headerlink" title="什么是可迭代对象"></a>什么是可迭代对象</h2><p>一种很简单的说法就是，具有迭代器的对象就是可迭代对象，但是这个迭代器的名称为[Symbol.iterator]，<br>它和迭代器是不同的概念，当一个对象实现了iterable protocol协议时，他就是一个可迭代对象，这个对象的要求是必须实现@@iterator方法，在代码中我们使用Symbol.iterator访问该属性。</p><p>以下为简单的可迭代对象代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iteratorObj=&#123;</span><br><span class="line">    <span class="attr">obj</span>:[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;n&#x27;</span>],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> index=<span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">next</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(index&lt;<span class="variable language_">this</span>.<span class="property">obj</span>.<span class="property">length</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">false</span>,<span class="attr">value</span>:<span class="variable language_">this</span>.<span class="property">obj</span>[index++]&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">true</span>,<span class="attr">value</span>:<span class="literal">undefined</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么可迭代对象有什么用呢？，我们都知道，for of 遍历的对象都需要是有迭代器的对象，比如Set、Map、Array，所以我们简单实现的这个可迭代对象是可以用 for of 遍历的。</p><p>所以我们用for of 遍历输出一些结果，结果如下</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5523e567d5974c42b47172f1d986a49d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><strong>在这里，我们的next（）方法一定要用箭头函数，将this指针绑定为interatorObj</strong></p><h2 id="可迭代对象的应用场景"><a href="#可迭代对象的应用场景" class="headerlink" title="可迭代对象的应用场景"></a>可迭代对象的应用场景</h2><ol><li>Javascript语法中，for of、展开语法（spread syntax）、yield<em>（yield</em>返回的必须是一个可迭代对象）、数组的解构赋值。</li><li>创建一些对象时：new Map([Iterable])、new WeakMap([Iterable])、new Set([Iterable])、new WeakSet([Iterable])。</li><li>一些方法的调用：Promise.all（Iterable）、Promise.race（Iterable）、Array.from（Iterable）。</li></ol><h3 id="注意！！！"><a href="#注意！！！" class="headerlink" title="注意！！！"></a>注意！！！</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newObj=&#123;...obj&#125;</span><br></pre></td></tr></table></figure><p>像这个展开语法，没有用到可迭代对象，而是在ES9（ES2018）中新增的一个特性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;done,value&#125;=obj</span><br></pre></td></tr></table></figure><p>这种对象的解构赋值也是ES9新增的特性</p><h2 id="什么是生成器"><a href="#什么是生成器" class="headerlink" title="什么是生成器"></a>什么是生成器</h2><p>生成器是ES6中新增的一种函数控制、使用的方案、它可以让我们更加灵活的控制函数什么时候继续执行、暂停执行等。</p><p>平时我们会编写很多的函数，这些函数终止的条件通常是返回值或者发生了异常。</p><p>在我们了解生成器之前，我们需要了解生成器函数。</p><h2 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h2><p>生成器函数也是一个函数，但是和普通的函数有一些区别</p><ol><li>生成器函数需要在function的后面加一个符号：*。</li><li>生成器函数可以通过yield关键字来控制函数的执行流程。</li><li>生成器函数的返回值是一个Generator（生成器）。</li></ol><p>生成器事实上是一种特殊的迭代器。<br>MDN：Instead,they return a special type of iterator,called a <strong>Generator</strong></p><p>下面是一个简单的生成器函数代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> value1=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value1)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">const</span> value2=<span class="string">&#x27;i&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value2)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">const</span> value3=<span class="string">&#x27;n&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value3)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> generator=<span class="title function_">foo</span>()</span><br><span class="line">generator.<span class="title function_">next</span>()</span><br><span class="line">generator.<span class="title function_">next</span>()</span><br><span class="line">generator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure><p>执行结果如下</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e17e01defcb94ea0b7fb4a7478bf9dea~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>生成器函数通过yield关键字控制函数的执行，当我们每一次调用next（）方法时，就会调用yield对应顺序的以下代码。</p><h3 id="yield关键字传出参数"><a href="#yield关键字传出参数" class="headerlink" title="yield关键字传出参数"></a>yield关键字传出参数</h3><p>当然，我们也可以通过在yield后边跟参数，将参数传出，并在next（）方法调用时接收</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> value1=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value1)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;export 1&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> value2=<span class="string">&#x27;i&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value2)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;export i&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> value3=<span class="string">&#x27;n&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value3)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;export n&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> generator=<span class="title function_">foo</span>()</span><br><span class="line"><span class="keyword">const</span> word1=generator.<span class="title function_">next</span>()</span><br><span class="line"><span class="keyword">const</span> word2=generator.<span class="title function_">next</span>()</span><br><span class="line"><span class="keyword">const</span> word3=generator.<span class="title function_">next</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(word1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(word2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(word3)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c510e993c4a42138fa923a81b0af9ce~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="next（）方法调用传入参数"><a href="#next（）方法调用传入参数" class="headerlink" title="next（）方法调用传入参数"></a>next（）方法调用传入参数</h3><p>当然，我们也可以在next（）方法调用时，传入参数，并用每一次yield执行时接收参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> value1=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value1)</span><br><span class="line">    <span class="keyword">const</span> s1=<span class="keyword">yield</span> <span class="string">&#x27;export 1&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s1)</span><br><span class="line">    <span class="keyword">const</span> value2=<span class="string">&#x27;i&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value2)</span><br><span class="line">    <span class="keyword">const</span> s2=<span class="keyword">yield</span> <span class="string">&#x27;export i&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s2)</span><br><span class="line">    <span class="keyword">const</span> value3=<span class="string">&#x27;n&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value3)</span><br><span class="line">    <span class="keyword">const</span> s3= <span class="keyword">yield</span> <span class="string">&#x27;export n&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s3)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> generator=<span class="title function_">foo</span>()</span><br><span class="line"><span class="keyword">const</span> word1=generator.<span class="title function_">next</span>()</span><br><span class="line"><span class="keyword">const</span> word2=generator.<span class="title function_">next</span>(<span class="string">&#x27;incoming 1&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> word3=generator.<span class="title function_">next</span>(<span class="string">&#x27;incoming i&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> word4=generator.<span class="title function_">next</span>(<span class="string">&#x27;incoming n&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(word1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(word2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(word3)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(word4)</span><br></pre></td></tr></table></figure><p>执行结果如下</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0b82171c6b44685a5a52d383cf17c75~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="return方法以及throw方法"><a href="#return方法以及throw方法" class="headerlink" title="return方法以及throw方法"></a>return方法以及throw方法</h3><p>通过调用return（）方法可以直接return出函数，不会再执行后边的函数，也无法用yield控制函数执行的过程，next（）方法也无法执行，throw方法则可以抛出异常。通过try catch方法去捕获错误。</p><h2 id="yield"><a href="#yield" class="headerlink" title="yield*"></a>yield*</h2><p>在生成器函数中 yield可以传出参数，但是当我们用yield* 传出参数时，传出的参数必须是可迭代对象，async和await语法糖也是用到了yield*实现。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>迭代器是一个对象，这个对象中有一个next（）方法，每次调用会retrun出一个对象，这个对象中有两个参数，done（bool类型）、value（具体的属性值）</li><li>当一个对象实现了iterable protocol协议时，他就是一个可迭代对象，这个对象的要求是必须实现@@iterator方法，在代码中我们使用Symbol.iterator访问该属性。</li><li>生成器是ES6中新增的一种函数控制、使用的方案、它可以让我们更加灵活的控制函数什么时候继续执行、暂停执行等。</li><li>生成器事实上是一种特殊的迭代器。</li><li>yield关键字传出参数、next（）方法调用传入参数。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在JS中，我们常常需要使用async以及await语法来发送网络请求等操作，但是这个语法的背后实现原理到底是什么呢？，我们就得需要了解迭代器</summary>
      
    
    
    
    <category term="前端" scheme="http://1in.ink:4000/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="http://1in.ink:4000/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>手写依赖收集（Proxy和Reflect）</title>
    <link href="http://1in.ink:4000/2023/05/28/%E6%89%8B%E5%86%99%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86%EF%BC%88Proxy%E5%92%8CReflect%EF%BC%89/"/>
    <id>http://1in.ink:4000/2023/05/28/%E6%89%8B%E5%86%99%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86%EF%BC%88Proxy%E5%92%8CReflect%EF%BC%89/</id>
    <published>2023-05-28T11:41:11.433Z</published>
    <updated>2023-05-28T11:52:46.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="响应式是什么？🙄"><a href="#响应式是什么？🙄" class="headerlink" title="响应式是什么？🙄"></a>响应式是什么？🙄</h2><p>在手写依赖收集之前，我们需要明白响应式到底是什么，假设，我们有一个对象info，info对象内有name、age两个属性元素，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;1in&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们有一个watchFn函数，依赖于info.name执行，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><p>每当我们info中的name改变时，watchFn函数因为依赖了info.name,所以watchFn函数就自动执行，这就是响应式，那么我们怎么监听info.name的变动呢？这时我们需要用到Proxy，在Vue2中使用的是Object.defineProperty，而在Vue3中则使用的就是Proxy。</p><h2 id="Proxy的基本使用"><a href="#Proxy的基本使用" class="headerlink" title="Proxy的基本使用"></a>Proxy的基本使用</h2><p>Proxy的汉译就是代理，具体基本用法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个对象info</span></span><br><span class="line"><span class="keyword">const</span> info=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;1in&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将对象info与Proxy绑定关系</span></span><br><span class="line"><span class="keyword">const</span> infoProxy=<span class="keyword">new</span> <span class="title class_">Proxy</span>(info,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      </span><br><span class="line">       <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key,receiver)</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, newValue, receiver</span>) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,newValue,receiver)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，我们就可以在get，set方法中具体监听info对象，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy具体用法</a>，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect">Reflect具体用法</a>。</p><h2 id="依赖收集（响应式原理）"><a href="#依赖收集（响应式原理）" class="headerlink" title="依赖收集（响应式原理）"></a>依赖收集（响应式原理）</h2><p>手写源码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存当前响应式函数</span></span><br><span class="line"><span class="keyword">let</span> activeReactiveFn=<span class="literal">null</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Depend</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reactiveFns</span>=<span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addDepend</span>(<span class="params">reactiveFn</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reactiveFns</span>.<span class="title function_">add</span>(reactiveFn)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">depend</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(activeReactiveFn)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">reactiveFns</span>.<span class="title function_">add</span>(activeReactiveFn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">notify</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reactiveFns</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">fn</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个响应式函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">watchFn</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    activeReactiveFn=fn</span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">    activeReactiveFn=<span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个获取depend函数</span></span><br><span class="line"><span class="keyword">const</span> targetMap=<span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDepend</span>(<span class="params">target,key</span>)&#123;</span><br><span class="line">    <span class="comment">//根据target获取map</span></span><br><span class="line">    <span class="keyword">let</span> map=targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">    <span class="keyword">if</span>(!map)&#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">        targetMap.<span class="title function_">set</span>(target,map)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据key获取depend</span></span><br><span class="line">    <span class="keyword">let</span> depend=map.<span class="title function_">get</span>(key)</span><br><span class="line">    <span class="keyword">if</span>(!depend)&#123;</span><br><span class="line">        depend = <span class="keyword">new</span> <span class="title class_">Depend</span>()</span><br><span class="line">        map.<span class="title function_">set</span>(key,depend)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depend</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Vue3响应式原理Proxy</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj,&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">            <span class="comment">//依赖收集</span></span><br><span class="line">            <span class="comment">//根据target，key获取对应的depend</span></span><br><span class="line">            <span class="keyword">const</span> depend=<span class="title function_">getDepend</span>(target,key)</span><br><span class="line">            <span class="comment">//给depend添加函数</span></span><br><span class="line">            <span class="comment">// depend.addDepend(activeReactiveFn)</span></span><br><span class="line">            depend.<span class="title function_">depend</span>()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key,receiver)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, newValue, receiver</span>) &#123;</span><br><span class="line">            <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,newValue,receiver)</span><br><span class="line">            <span class="comment">// depend.notify()</span></span><br><span class="line">            <span class="keyword">const</span> depend=<span class="title function_">getDepend</span>(target,key)</span><br><span class="line">            depend.<span class="title function_">notify</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;1in&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> infoProxy=<span class="title function_">reactive</span>(info)</span><br><span class="line"><span class="title function_">watchFn</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(infoProxy.<span class="property">name</span>)</span><br><span class="line">&#125;)</span><br><span class="line">infoProxy.<span class="property">name</span>=<span class="string">&quot;1in.&quot;</span></span><br></pre></td></tr></table></figure><p>首先，我们需要声明一个Set数据结构reactiveFns来存储watchFn函数（可以用数组来存储，但是数组的值可以重复，可能会导致收集的依赖函数重复，所以这里我们用Set数据结构，防止重复。），因为watchFn函数不止一个，并且我们需要依次执行所有的watchFn函数，所以我们需要创建一个class来声明这些方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Depend</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//利用Set数据结构防止收集的依赖函数重复</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reactiveFns</span>=<span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addDepend</span>(<span class="params">reactiveFn</span>)&#123;</span><br><span class="line">        <span class="comment">//将依赖函数添加到Set数据结构中</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reactiveFns</span>.<span class="title function_">add</span>(reactiveFn)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">notify</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//利用forEach遍历Set数据结构，依次执行watchFn函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reactiveFns</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">fn</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后我们就可以创建一个reactive函数，传入一个obj对象，返回一个响应式（Proxy）的对象，自动绑定为响应式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj,&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key,receiver)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, newValue, receiver</span>) &#123;</span><br><span class="line">            <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,newValue,receiver)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们就可以为对象中的每一个元素属性进行依赖收集，在这里我们用到了WeakMap以及Map数据结构，因为每一个元素的依赖都不一样，所以每一个元素都要new一个Depend对象存储在Map数据结构中（一个Map对应着一个对象），最终用WeakMap将所有的Map存储起来，这里用WeakMap的原因是WeakMap的key是弱引用，当存储的Map指针指向为null时，这个Map就会被GC垃圾回收，可以防止内存泄漏。</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42643cc767a64613a11b1889b39c1eb2~tplv-k3u1fbpfcp-watermark.image?" alt="c42897359ca89d8cf08d9383051236a.jpg" width="100%" /><p>所以接下来我们需要构造一个getDepend函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个WeakMap的数据结构</span></span><br><span class="line"><span class="keyword">const</span> targetMap=<span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDepend</span>(<span class="params">target,key</span>)&#123;</span><br><span class="line">    <span class="comment">//根据target获取map</span></span><br><span class="line">    <span class="keyword">let</span> map=targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">    <span class="comment">//第一次get肯定没有map，所以需要new</span></span><br><span class="line">    <span class="keyword">if</span>(!map)&#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">        targetMap.<span class="title function_">set</span>(target,map)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据key获取depend</span></span><br><span class="line">    <span class="keyword">let</span> depend=map.<span class="title function_">get</span>(key)</span><br><span class="line">    <span class="comment">//第一次get肯定没有depend，所以需要new</span></span><br><span class="line">    <span class="keyword">if</span>(!depend)&#123;</span><br><span class="line">        depend = <span class="keyword">new</span> <span class="title class_">Depend</span>()</span><br><span class="line">        map.<span class="title function_">set</span>(key,depend)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们构造了一个getDepend函数之后，我们就可以在Proxy中添加getDepend函数，完成响应式。</p><p>在此之前我们需要构造watchFn函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function watchFn(fn)&#123;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(obj,&#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">        <span class="comment">//依赖收集</span></span><br><span class="line">        <span class="comment">//根据target，key获取对应的depend</span></span><br><span class="line">        <span class="keyword">const</span> depend=<span class="title function_">getDepend</span>(target,key)</span><br><span class="line">        <span class="comment">//给depend添加函数</span></span><br><span class="line">        depend.<span class="title function_">addDepend</span>(activeReactiveFn)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key,receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, newValue, receiver</span>) &#123;</span><br><span class="line">        <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,key,newValue,receiver)</span><br><span class="line">        <span class="comment">// depend.notify()</span></span><br><span class="line">        <span class="keyword">const</span> depend=<span class="title function_">getDepend</span>(target,key)</span><br><span class="line">        depend.<span class="title function_">notify</span>()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在set方法中，调用notify（）方法执行所有的watchFn函数，在get方法中，收集所有的依赖函数，因为依赖函数依赖对象中的元素属性，所以当依赖函数调用时，会调用Proxy中的get方法，所以我们可以在get方法中进行依赖函数的收集，所以，我们需要在全局声明一个activeReactiveFn&#x3D;null,当依赖函数调用之前，使activeReactiveFn指向这个依赖函数，当依赖函数调用get方法时，将这个依赖函数添加到reactiveFns中。具体代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> activeReactiveFn=<span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">watchFn</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    activeReactiveFn=fn</span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">    activeReactiveFn=<span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然，我们也可以对addDepend进行优化，也就是说我们直接可以调用depend.depend()函数，自动添加依赖函数到reactiveFns中，不用传参，所以我们需要在class中添加一个depend（）方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Depend&#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.reactiveFns=new Set()</span><br><span class="line">    &#125;</span><br><span class="line">    addDepend(reactiveFn)&#123;</span><br><span class="line">        this.reactiveFns.add(reactiveFn)</span><br><span class="line">    &#125;</span><br><span class="line">    depend()&#123;</span><br><span class="line">        if(activeReactiveFn)&#123;</span><br><span class="line">            this.reactiveFns.add(activeReactiveFn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    notify()&#123;</span><br><span class="line">        this.reactiveFns.forEach(fn=&gt;&#123;</span><br><span class="line">            fn()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后，我们就可以在get方法中这样调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">get(target, key, receiver) &#123;</span><br><span class="line">    //依赖收集</span><br><span class="line">    //根据target，key获取对应的depend</span><br><span class="line">    const depend=getDepend(target,key)</span><br><span class="line">    //给depend添加函数</span><br><span class="line">    // depend.addDepend(activeReactiveFn)</span><br><span class="line">    depend.depend()</span><br><span class="line"></span><br><span class="line">    return Reflect.get(target,key,receiver)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>至此，Proxy的依赖收集，手写结束！🥳🥳🥳。</p><h2 id="总结-🥂"><a href="#总结-🥂" class="headerlink" title="总结 🥂"></a>总结 🥂</h2><ol><li>对象中的每一个元素属性都有对应的一个Depend对象（reactiveFns）。</li><li>使用WeakMap存储对象（Map），使用Map存储Depend对象。</li><li>使用Set数据结构来存储reactiveFns，防止收集依赖函数重复。</li><li>使用Proxy中的set方法来执行reactiveFns。</li><li>使用Proxy中的get方法来收集依赖函数。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;响应式是什么？🙄&quot;&gt;&lt;a href=&quot;#响应式是什么？🙄&quot; class=&quot;headerlink&quot; title=&quot;响应式是什么？🙄&quot;&gt;&lt;/a&gt;响应式是什么？🙄&lt;/h2&gt;&lt;p&gt;在手写依赖收集之前，我们需要明白响应式到底是什么，假设，我们有一个对象info，in</summary>
      
    
    
    
    <category term="前端" scheme="http://1in.ink:4000/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="http://1in.ink:4000/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Nest.js中如何使用HTTP五种数据传输方式</title>
    <link href="http://1in.ink:4000/2023/05/27/Nest.js%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8HTTP%E4%BA%94%E7%A7%8D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%96%B9%E5%BC%8F/"/>
    <id>http://1in.ink:4000/2023/05/27/Nest.js%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8HTTP%E4%BA%94%E7%A7%8D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%96%B9%E5%BC%8F/</id>
    <published>2023-05-27T09:55:00.000Z</published>
    <updated>2023-05-28T11:52:54.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1514657ca1e468dbd1d7b76dc951ef3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%">Nest.js作为JS的后端框架，是JS开发者迈向全栈的不错选择，Nest.js也是企业中最流行的Node框架，它提供了IOC、AOP、微服务等架构特性。<p>接下来就让我们认识一下Nest.js在<code>HTTP五种数据</code>传输方式中的使用。</p><h2 id="Param"><a href="#Param" class="headerlink" title="Param"></a>Param</h2><p><code>param</code> 传输方式是通过url的参数传递，也是最常见的一种前端向后端传递参数的方式。</p><p>如果Nest后端接口这样设置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;api/parma&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParmaController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line">  <span class="title function_">urlParm</span>(<span class="params"><span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`id=<span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端请求这样请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:3000/api/parma/cdut&quot;</span>)</span><br></pre></td></tr></table></figure><p>那么，其中的<code>cdut</code>会被当做parma参数被Nest截取，Nest也为我们提供了便捷的<code>@Param</code>装饰器，使我们可以更便捷的提取param参数。</p><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p><code>query</code>传输方式也是通过url的参数传递，但是他与parma略有不同。query传输方式需要做url encode</p><p>如果Nest后端接口这样设置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;api/query&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">QueryController</span> &#123; </span><br><span class="line">    <span class="meta">@Get</span>(<span class="string">&#x27;find&#x27;</span>) <span class="title function_">query</span>(<span class="params"><span class="meta">@Query</span>(<span class="string">&#x27;name&#x27;</span>) name: <span class="built_in">string</span>, <span class="meta">@Query</span>(<span class="string">&#x27;age&#x27;</span>) age: <span class="built_in">number</span></span>) </span><br><span class="line">    &#123; <span class="keyword">return</span> <span class="string">`name=<span class="subst">$&#123;name&#125;</span>,age=<span class="subst">$&#123;age&#125;</span>`</span>; &#125; &#125;</span><br></pre></td></tr></table></figure><p>前端请求这样请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:3000/api/query/&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;1in&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因为axios会自动帮我们url encode，所以我们不需要自己手动url encode，在Nest中，我们通过<code>@Query</code>这个装饰器来取到query参数。</p><h2 id="Form-urlencoded"><a href="#Form-urlencoded" class="headerlink" title="Form urlencoded"></a>Form urlencoded</h2><p>与query不同的是，from urlencoded是通过post请求中的body来传递参数，实际上，就是把query的参数放在body中。</p><p>需要注意的是我们需要在<code>请求头</code>中设置<code>&#39;content-type&#39;: &#39;application/x-www-form-urlencoded&#39;</code>。</p><p>如果Nest后端接口这样设置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;api/form-urlencoded&#x27;</span>) </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FormUrlencodedController</span> &#123; </span><br><span class="line">    <span class="meta">@Post</span>() <span class="title function_">body</span>(<span class="params"><span class="meta">@Body</span>() body</span>)</span><br><span class="line">    &#123; <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(body)&#125;</span>`</span> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端请求前，我们需要使用<code>qs</code>这个库来做一下url encode</p><p>前端请求这样请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:3000/api/form-urlencoded&#x27;</span>,</span><br><span class="line">    <span class="title class_">Qs</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;1in&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;), </span><br><span class="line">    &#123; <span class="attr">headers</span>: &#123; <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><p>在Nest中，我们可以通过@Body这个装饰器来直接取到body中的内容。</p><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>与form urlencoded不同的是，json需要指定的<code>content-type</code>为<code>application/json</code>，也不需要url encode，同样的也是通过post请求中的Body传输数据。</p><p>如果Nest后端接口这样设置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;api/json&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JsonController</span> &#123;</span><br><span class="line">    <span class="meta">@Post</span>()</span><br><span class="line">    <span class="title function_">body</span>(<span class="params"><span class="meta">@Body</span>() body</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`received: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(createPersonDto)&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端这样请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;http://localhost:3000/api/json&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;1in&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因为<code>axios</code>会帮我们设置<code>content-type</code>为<code>application/json</code>，所以不需要我们自动设置，Nest同样也是通过@Body装饰器取到body中传输的数据。</p><h2 id="Form-data"><a href="#Form-data" class="headerlink" title="Form data"></a>Form data</h2><p>form data是通过———作为boundary传输的内容，主要用于传输文件。</p><p>如果Nest后端接口这样设置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AnyFilesInterceptor</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/platform-express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;api/form-data&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FormDataController</span> &#123;</span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">  <span class="meta">@UseInterceptors</span>(<span class="title class_">AnyFilesInterceptor</span>())</span><br><span class="line">  <span class="title function_">body2</span>(<span class="params"><span class="meta">@Body</span>() body, <span class="meta">@UploadedFiles</span>() files: <span class="built_in">Array</span>&lt;Express.Multer.File&gt;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(files);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`received: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(body)&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前端代码使用 axios 发送 post 请求，指定 content type 为 <code>multipart/form-data</code></p><p>前端请求是这样的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios@0.24.0/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;updateFile&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#updateFile&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">formData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            data.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;1in&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            data.<span class="title function_">set</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">20</span>);</span></span><br><span class="line"><span class="language-javascript">            data.<span class="title function_">set</span>(<span class="string">&#x27;file1&#x27;</span>, fileInput.<span class="property">files</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">            data.<span class="title function_">set</span>(<span class="string">&#x27;file2&#x27;</span>, fileInput.<span class="property">files</span>[<span class="number">1</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:3000/api/form-data/file&#x27;</span>, data, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">headers</span>: &#123; <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">             </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        fileInput.<span class="property">onchange</span> = formData;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>form data通过 —– 作为 boundary 分隔的数据。主要用于传输文件，在Nest中使用 FilesInterceptor 来处理其中的 binary 字段，用 @UseInterceptors 装饰器来启用，其余字段用 @Body 装饰器来取。axios 发送请求时，需要设置请求头，指定 <code>content type</code>为 <code>multipart/form-data</code>，并且用 FormData 对象来封装传输的内容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;img src=&quot;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1514657ca1e4</summary>
      
    
    
    
    <category term="后端" scheme="http://1in.ink:4000/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="TepyScript" scheme="http://1in.ink:4000/tags/TepyScript/"/>
    
    <category term="Nest.js" scheme="http://1in.ink:4000/tags/Nest-js/"/>
    
  </entry>
  
  <entry>
    <title>JS如何实现图片压缩</title>
    <link href="http://1in.ink:4000/2023/05/20/JS%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    <id>http://1in.ink:4000/2023/05/20/JS%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</id>
    <published>2023-05-20T13:59:00.000Z</published>
    <updated>2023-05-28T11:49:42.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a82edb207c814cd09c2c6b0627829478~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%">关于图片压缩这一般都是由后端来完成~，但是前端掌握这项技能也是必不可少的。<h2 id="图片压缩思路"><a href="#图片压缩思路" class="headerlink" title="图片压缩思路"></a>图片压缩思路</h2><p>我们读取源图片之后，利用<code>canvas</code>画板画出源图片，然后利用<code>toDataURL</code>这个API转换成<code>base64</code>的格式</p><p>需要FileReade这个对象去reader图片，并且利用reader.onload这个监听事件完成图片压缩。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="index-html文件"><a href="#index-html文件" class="headerlink" title="index.html文件"></a>index.html文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.hide</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.show</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: initial;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.img-preview</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;imgFileSelector&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请选择图片&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;originImgPreview&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-preview  hide&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;compressedImgPreview&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-preview hide&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为img元素既不是<code>块级元素</code>也不是<code>行内级元素</code>，所以添加类<code>.show</code>时需要设置为<code>display:initial</code>。</p><h3 id="index-js文件"><a href="#index-js文件" class="headerlink" title="index.js文件"></a>index.js文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取HTML元素</span></span><br><span class="line"><span class="keyword">const</span> oImageFileSelector=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#imgFileSelector&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> oOriginImgPreview=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#originImgPreview&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> oCompressedImgPreview=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#compressedImgPreview&quot;</span>)</span><br><span class="line"><span class="comment">//创建reader对象</span></span><br><span class="line"><span class="keyword">const</span> reader=<span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imgFile=<span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> quality=<span class="number">90</span></span><br><span class="line"><span class="keyword">let</span> compressedImgSrc=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构建IMG_TYPES表</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IMG_TYPES</span>=&#123;</span><br><span class="line">    <span class="string">&quot;image/jpeg&quot;</span>:<span class="string">&quot;image/jepg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;image/png&quot;</span>:<span class="string">&quot;image/png&quot;</span>,</span><br><span class="line">    <span class="string">&quot;image/gif&quot;</span>:<span class="string">&quot;image/gif&quot;</span>,</span><br><span class="line">    <span class="string">&quot;image/jpg&quot;</span>:<span class="string">&quot;image/jpg&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span> ()&#123;</span><br><span class="line">    <span class="title function_">bindEvent</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构建绑定事件函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    oImageFileSelector.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>,handleFileSelectorChange,<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleFileSelectorChange</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    imgFile=e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(imgFile)</span><br><span class="line">    <span class="comment">//判断imgFile是否存在并且imgFile的类型是否为IMG_TYPES表中的类型</span></span><br><span class="line">    <span class="keyword">if</span>(!imgFile || !<span class="variable constant_">IMG_TYPES</span>[imgFile.<span class="property">type</span>] )&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请选择正确格式的图片&quot;</span>)</span><br><span class="line">        <span class="title function_">setImgFileEmpty</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setImgPreview</span>(imgFile)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化imgFile</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setImgFileEmpty</span>(<span class="params"></span>)&#123;</span><br><span class="line">    oImageFileSelector.<span class="property">value</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">    imgFile=<span class="literal">null</span></span><br><span class="line">    <span class="title function_">setPreviewVisible</span>(oOriginImgPreview,<span class="literal">false</span>)</span><br><span class="line">    <span class="title function_">setPreviewVisible</span>(oCompressedImgPreview,<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setImgPreview</span>(<span class="params">imgFile</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>( imgFile <span class="keyword">instanceof</span> <span class="title class_">File</span>)&#123;</span><br><span class="line">        reader.<span class="property">onload</span>=<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">            <span class="keyword">const</span> originImgSrc=reader.<span class="property">result</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> compressedImgSrc=<span class="keyword">await</span> <span class="title function_">createCompressedImage</span>(&#123;</span><br><span class="line">                <span class="attr">imgSrc</span>:originImgSrc,</span><br><span class="line">                <span class="attr">type</span>:imgFile.<span class="property">type</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(compressedImgSrc)</span><br><span class="line">            </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未压缩&quot;</span>,originImgSrc.<span class="property">length</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;压缩后&quot;</span>,compressedImgSrc.<span class="property">length</span>)</span><br><span class="line">            oOriginImgPreview.<span class="property">src</span>=originImgSrc</span><br><span class="line">            <span class="title function_">setPreviewVisible</span>(oOriginImgPreview,<span class="literal">true</span>)</span><br><span class="line">            oCompressedImgPreview.<span class="property">src</span>=compressedImgSrc</span><br><span class="line">            <span class="title function_">setPreviewVisible</span>(oCompressedImgPreview,<span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reader.<span class="title function_">readAsDataURL</span>(imgFile)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCompressedImage</span> (&#123;</span><br><span class="line">    imgSrc,</span><br><span class="line">    type</span><br><span class="line">&#125;)&#123;</span><br><span class="line">    <span class="keyword">const</span> oCan=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> oImg=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> context=oCan.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line"></span><br><span class="line">    oImg.<span class="property">src</span>=imgSrc</span><br><span class="line">    <span class="comment">//因为通过onload事件触发回调函数，所以需要Promise的resolve回调传回值并接收</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">        oImg.<span class="property">onload</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> imageWidth=oImg.<span class="property">width</span></span><br><span class="line">            <span class="keyword">const</span> imageHeight=oImg.<span class="property">height</span></span><br><span class="line">    </span><br><span class="line">            oCan.<span class="property">width</span>=imageWidth</span><br><span class="line">            oCan.<span class="property">height</span>=imageHeight</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//利用canvas的drawImage函数去画出源图像</span></span><br><span class="line">            context.<span class="title function_">drawImage</span>(oImg,<span class="number">0</span>,<span class="number">0</span>,imageWidth,imageHeight)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> compressedImgSrc = <span class="title function_">doCompress</span>(oCan, type, imgSrc)</span><br><span class="line">            <span class="title function_">resolve</span>(compressedImgSrc)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建递归函数，如果压缩的文件大小大于源文件就继续压缩</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doCompress</span> (canvas,type,imgSrc)&#123;</span><br><span class="line">    compressedImgSrc=canvas.<span class="title function_">toDataURL</span>(type,quality/<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(compressedImgSrc.<span class="property">length</span> &gt;=imgSrc.<span class="property">length</span> &amp;&amp; quality&gt;<span class="number">10</span>)&#123;</span><br><span class="line">        quality-=<span class="number">10</span></span><br><span class="line">        <span class="title function_">doCompress</span>(canvas,type,imgSrc)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> compressedImgSrc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否显示img元素</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setPreviewVisible</span> (node,visible)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(visible)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">true</span>:</span><br><span class="line">            node.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;hide&quot;</span>)</span><br><span class="line">            node.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;show&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="attr">false</span>:</span><br><span class="line">            node.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;show&quot;</span>)</span><br><span class="line">            node.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;hide&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要注意的是，我们是通过oImg.onload来执行压缩代码的，所以我们需要用Promise的resolve回调来传出值，通过async、await来接收值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;img src=&quot;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a82edb207c814</summary>
      
    
    
    
    <category term="前端" scheme="http://1in.ink:4000/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="http://1in.ink:4000/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Concurrency-封装并发请求</title>
    <link href="http://1in.ink:4000/2023/05/18/Concurrency-%E5%B0%81%E8%A3%85%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82/"/>
    <id>http://1in.ink:4000/2023/05/18/Concurrency-%E5%B0%81%E8%A3%85%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82/</id>
    <published>2023-05-18T14:22:00.000Z</published>
    <updated>2023-05-28T11:48:56.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><p>并发请求在平时做项目时经常出现，一般我们可以用Promise.all配合Promise.race可以解决这个问题，我们也可以自己封装一个class去解决这个并发请求。</p><h2 id="封装需求"><a href="#封装需求" class="headerlink" title="封装需求"></a>封装需求</h2><p>用class封装一个ConcurrencyRequest，将所有的请求task通过push函数添加至该class中的taskQueue，并且在new的同时，指定maxConcurrencyRequest，最后，我们可以使用ConcurrencyRequest.responses查看响应结果。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/964ad603374842ce9383db13055d0ce7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><p>因为自己模拟了9个请求，所以代码会有些长并且有很多重复~可以跳过重复，查看核心代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ConcurrencyRequest</span> <span class="keyword">from</span> <span class="string">&quot;./ConcurrencyRequest.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BASE_URL</span>=<span class="string">&quot;http://localhost:5000/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="variable constant_">BASE_URL</span>+<span class="string">&#x27;test1&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="variable constant_">BASE_URL</span>+<span class="string">&#x27;test2&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="variable constant_">BASE_URL</span>+<span class="string">&#x27;test3&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest4</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="variable constant_">BASE_URL</span>+<span class="string">&#x27;test4&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="variable constant_">BASE_URL</span>+<span class="string">&#x27;test5&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest6</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="variable constant_">BASE_URL</span>+<span class="string">&#x27;test6&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest7</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="variable constant_">BASE_URL</span>+<span class="string">&#x27;test7&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest8</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="variable constant_">BASE_URL</span>+<span class="string">&#x27;test8&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTest9</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="variable constant_">BASE_URL</span>+<span class="string">&#x27;test9&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> taskQueue=[</span><br><span class="line">    getTest1,</span><br><span class="line">    getTest2,</span><br><span class="line">    getTest3,</span><br><span class="line">    getTest4,</span><br><span class="line">    getTest5,</span><br><span class="line">    getTest6,</span><br><span class="line">    getTest7,</span><br><span class="line">    getTest8,</span><br><span class="line">    getTest9,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> concurrencyRequest =<span class="keyword">new</span> <span class="title class_">ConcurrencyRequest</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">maxConcurrencyRequest</span>:<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> task <span class="keyword">of</span> taskQueue)&#123;</span><br><span class="line">    concurrencyRequest.<span class="title function_">push</span>(task);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(concurrencyRequest.<span class="property">responses</span>)</span><br></pre></td></tr></table></figure><h3 id="ConcurrencyRequest-js"><a href="#ConcurrencyRequest-js" class="headerlink" title="ConcurrencyRequest.js"></a>ConcurrencyRequest.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">ConcurrencyRequest</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">        maxConcurrencyRequest</span></span><br><span class="line"><span class="params">    &#125;</span>)&#123;</span><br><span class="line">        <span class="comment">//获取到传入的最大并发量</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">maxConcurrencyRequest</span>=maxConcurrencyRequest;</span><br><span class="line">        <span class="comment">//声明任务队列</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">taskQueue</span>=[];</span><br><span class="line">        <span class="comment">//声明最后获得的信息对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">responses</span>=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为在new ConcurrencyRequest后要push task才可以执行并发，所以把执行并发的时机放到push task之后</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_doRequest</span>();</span><br><span class="line">        &#125;,<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">push</span>(<span class="params">task</span>)&#123;</span><br><span class="line">        <span class="comment">//将请求任务push到任务队列中</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">taskQueue</span>.<span class="title function_">push</span>(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">_doRequest</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//如果任务队列中没任务时，就不做请求，直接return</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">taskQueue</span>.<span class="property">length</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取最小值</span></span><br><span class="line">        <span class="keyword">const</span> minConcurrencyRequest=<span class="title function_">getMinCount</span>(</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">maxConcurrencyRequest</span>,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">taskQueue</span>.<span class="property">length</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;minConcurrencyRequest;i++)&#123;</span><br><span class="line">            <span class="keyword">const</span> task=<span class="variable language_">this</span>.<span class="property">taskQueue</span>.<span class="title function_">shift</span>();</span><br><span class="line">            <span class="comment">//因为我们需要保证同时最多只能有指定数请求所以我们在请求前需要-1</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">maxConcurrencyRequest</span>--;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_runTask</span>(task);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">_runTask</span>(<span class="params">task</span>)&#123;</span><br><span class="line">        <span class="title function_">task</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">responses</span>[task.<span class="property">name</span>]=&#123;</span><br><span class="line">                <span class="attr">result</span>:res,</span><br><span class="line">                <span class="attr">error</span>:<span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">responses</span>[task.<span class="property">name</span>]=&#123;</span><br><span class="line">                <span class="attr">result</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">error</span>:error</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//请求完成后+1</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">maxConcurrencyRequest</span>++;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_doRequest</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMinCount</span>(<span class="params">count1,count2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(count1,count2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="server-index-js"><a href="#server-index-js" class="headerlink" title="server-index.js"></a>server-index.js</h3><p>用express启动的服务器后台，模拟了九个接口，代码有重复，可以直接跳过~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express =<span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置请求头，解决跨域</span></span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//允许get方法访问</span></span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow--Methods&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test1&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;test1&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test2&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;test2&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test3&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;test3&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test4&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;test4&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test5&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;test5&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test6&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;test6&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test7&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;test7&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test8&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;test8&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test9&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;test9&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">5000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动咯~&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc401529e5904f6f961294b2dd283909~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>首先需要注意我们并发执行的时机，因为需要所有的task push到taskQueue中才执行，所以我们需要将执行函数用setTimeout包裹（放入宏任务队列）。</li><li>因为同时只能请求我们指定的请求数，所以我们需要在每一次请求前将maxConcurrencyRequest-1，当请求完成时+1。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Concurrency&quot;&gt;&lt;a href=&quot;#Concurrency&quot; class=&quot;headerlink&quot; title=&quot;Concurrency&quot;&gt;&lt;/a&gt;Concurrency&lt;/h2&gt;&lt;p&gt;并发请求在平时做项目时经常出现，一般我们可以用Promise.all</summary>
      
    
    
    
    <category term="前端" scheme="http://1in.ink:4000/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="http://1in.ink:4000/tags/JavaScript/"/>
    
    <category term="并发请求" scheme="http://1in.ink:4000/tags/%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>Node.JS中的事件循环 Event Loop</title>
    <link href="http://1in.ink:4000/2023/03/08/Node.JS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%20Event%20Loop/"/>
    <id>http://1in.ink:4000/2023/03/08/Node.JS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%20Event%20Loop/</id>
    <published>2023-03-08T14:18:00.000Z</published>
    <updated>2023-05-28T11:57:16.531Z</updated>
    
    <content type="html"><![CDATA[<img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/262b606c572641ffbeaaf9014fab4276~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%" /><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>JavaScript中的事件循环（Event loop）在浏览器中和Node.JS中是有一定的不同，浏览器中的事件循环可以参考这篇<a href="https://juejin.cn/post/7207743145998860325">（JavaScript在浏览器中的事件循环）</a>，那么在Node.JS中的事件循环具体是什么呢？我总结了以下不同。</strong></p><p><strong>Javascript执行时，同步按顺序执行，遇到异步函数则会放到异步队列中等待执行，所以Javascript中的同步代码最优先执行。在Node.JS中也是如此，所以同步函数永远优先执行。</strong></p><p><strong>Node的事件循环更复杂，它也分为微任务和宏任务</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9b481a3600c4e898e587cf13eadf284~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="宏任务（MacroTask）"><a href="#宏任务（MacroTask）" class="headerlink" title="宏任务（MacroTask）"></a>宏任务（MacroTask）</h2><p><strong>在Node.js中，常见的宏任务事件循环有，setTimeout、setInterval、IO事件、setImmediate、close事件，但是，Node中的事件循环不止一个宏任务队列，它主要分为四种宏任务队列，并且宏任务队列也有优先级之分，四种队列按优先级排序，如下</strong></p><ol><li>timer queque：setTimeout、setInterval；</li><li>poll queue：IO事件；</li><li>check queue：setImmediate；</li><li>close queue：close事件；</li></ol><h2 id="微任务（MicroTask）"><a href="#微任务（MicroTask）" class="headerlink" title="微任务（MicroTask）"></a>微任务（MicroTask）</h2><p><strong>在Node.js中，常见的微任务事件循环有，Promise的then回调、process.nextTick、queueMicrotask，同样，Node中的事件循环不止一个微任务队列，它主要分为两种微任务队列，同样的，微任务队列也有优先级之分，两种队列按优先级排序，如下</strong></p><p>1.next tick queue：process.nextTick；<br>2.other queue：Promise的then回调、queueMicrotask；</p><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p><strong>大局上的执行顺序与浏览器中的执行顺序相同，优先执行微任务，待微任务队列执行完成后，执行宏任务队列，只不过微任务队列与宏任务队列进行了细分以及优先级的细分。</strong></p><p><strong>同样，当微任务执行完时，才会执行宏任务，但每一次执行一个宏任务后，浏览器会查看微任务队列中是否存有未执行的任务，如果有，则会将微任务队列执行完，再去执行宏任务，反复如此，直至任务队列全部执行完成。</strong></p><h2 id="举个🌰"><a href="#举个🌰" class="headerlink" title="举个🌰"></a>举个🌰</h2><p><strong>根据上边的总结，判断以下代码的输出结果</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>. <span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="built_in">setTimeout</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout2&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout2&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">300</span>)</span><br><span class="line">setImmediate ( <span class="function">() =&gt;</span> <span class="variable language_">console</span>. log (<span class="string">&#x27;setImmediate&#x27;</span>));</span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>. <span class="title function_">log</span>(<span class="string">&#x27;nextTick1&#x27;</span>));</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>. log (<span class="string">&#x27;nextTick2&#x27;</span> ));</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span> (<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;).<span class="property">then</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>. log (<span class="string">&#x27;promise3&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>. log (<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>在上边的代码中我们遇到了async、await函数，在async函数中，执行await函数的下一行代码，我们可以当成一个Promise.then的回调，将它放入微任务中的other队列，因为setTimeout2有300ms的延迟入列，所以优先于setImmediate输出。</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/753a3f12ac674045b0d923950e11533f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>根据上述的总结，我们可以画出对应的队列一一入列，然后依照优先级依次执行，执行出的结果如图所示</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/689e7b3051ba47f5b456c4617269f108~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>可见，我们按照总结推断出的console.log与输出完全一致。</strong></p><h2 id="陷阱题目！"><a href="#陷阱题目！" class="headerlink" title="陷阱题目！"></a>陷阱题目！</h2><p><strong>那么，我们接下来看一下这个代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line">setImmediate (</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="variable language_">console</span>. log (<span class="string">&#x27;setImmediate&#x27;</span>));</span><br></pre></td></tr></table></figure><p><strong>我们先执行一次看一下结果，想必大家已经有了结果。</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/121a265a47e645bb879cfbc263480d65~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><strong>那我们再次执行，看看会有什么结果呢？</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8eaa7c1728644dea9c38fed2e2da29d3~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><strong>为什么两次执行结果不一样呢？</strong></p><p><strong>因为当Node.js开始初始化加载事件循环时，如果初始化过快，setTimeout（timer）没有加载到任务队列，就会先执行setImmediate，执行完后，发现有timer微任务，就会再执行timer微任务队列，当初始化的时间小于setTimeout（timer）加载到任务队列的时间时，当Node.js开始执行事件循环时，setTimeout（timer）就已经加载到timer微任务队列了，所以就会根据优先级执行，所以就会产生这两种不同的结果。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Node中的事件循环不止一个宏任务队列，它主要分为四种宏任务队列</li><li>Node中的事件循环不止一个微任务队列，它主要分为两种微任务队列</li><li>常见的宏任务事件循环有，setTimeout、setInterval、IO事件、setImmediate、close事件</li><li>常见的微任务事件循环有，Promise的then回调、process.nextTick、queueMicrotask</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/262b606c572641ffbeaaf9014fab4276~tplv-k3u1fbpfcp-watermark.image?&quot; alt=&quot;image.pn</summary>
      
    
    
    
    <category term="后端" scheme="http://1in.ink:4000/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Node.js" scheme="http://1in.ink:4000/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript在浏览器中的事件循环</title>
    <link href="http://1in.ink:4000/2023/03/07/JavaScript%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <id>http://1in.ink:4000/2023/03/07/JavaScript%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</id>
    <published>2023-03-07T13:08:00.000Z</published>
    <updated>2023-05-28T11:40:05.565Z</updated>
    
    <content type="html"><![CDATA[<p><strong>由于Javascript是单线程执行，所以有同步和异步的概念，正因为有同步和异步的概念，所以需要单线程逐步执行同步和异步的事件。</strong></p><p><strong>Javascript执行时，同步按顺序执行，遇到异步函数则会放到异步队列中等待执行，所以Javascript中的同步代码最优先执行。</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31a201bb483b4d4ab01395443645b26e~tplv-k3u1fbpfcp-watermark.image" alt="1678190653124.png"></p><p><strong>javascript每一次执行函数都是一个入栈和出栈的过程，执行时入栈，执行完出栈。</strong></p><h2 id="浏览器中的事件循环"><a href="#浏览器中的事件循环" class="headerlink" title="浏览器中的事件循环"></a>浏览器中的事件循环</h2><p><strong>在浏览器中，JavaScript的任务队列实际上分为宏任务和微任务队列，浏览器优先执行微任务，当微任务执行完时，才会执行宏任务，但每一次执行一个宏任务后，浏览器会查看微任务队列中是否存有未执行的任务，如果有，则会将微任务队列执行完，再去执行宏任务，反复如此，直至任务队列全部执行完成。</strong></p><h2 id="宏任务（MacroTask）"><a href="#宏任务（MacroTask）" class="headerlink" title="宏任务（MacroTask）"></a>宏任务（MacroTask）</h2><p><strong>常见的宏任务有Event（监听事件）、setTimeout、setInterval、（ajax callback），在每一次执行完一个宏任务后，浏览器就会检查微任务队列是否有任务。也就是宏任务执行之前，必须保证微任务队列是空的；如果不为空，那么就先执行微任务队列中的任务（回调）。</strong></p><h2 id="微任务（MicroTask）"><a href="#微任务（MicroTask）" class="headerlink" title="微任务（MicroTask）"></a>微任务（MicroTask）</h2><p><strong>常见的微任务有Promise.then（）的回调、Mutation Observer API、queueMicrotask（），微任务优先执行。</strong></p><h2 id="举个🌰"><a href="#举个🌰" class="headerlink" title="举个🌰"></a>举个🌰</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set1&#x27;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then4&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then2&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pr1&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="title function_">queueMicrotask</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;queueMicrotask1&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then3&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>根据浏览器事件循环的逻辑，以上代码的输出顺序是怎么样的呢？</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89ffc12f09b0499785110a2c4ff03d2e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>首先，我们画一个宏任务队列（MacroTaskQueue）和一个微任务队列（MircroTaskQueue），根据上述的任务队列执行顺序可以推断出上述的结果。</strong><br><strong>当我们遇到第一个setTimeout时，将它先放入宏任务队列，遇到Promise函数时，函数体内的函数照常同步执行，所以第一个输出”pr1”,因为第一个Primose执行了resolve函数，所以resolve的回调需要执行，所以将第一个Promise.then的回调放入微任务队列，同样遇到第二个setTimeout时，直接放入宏任务队列，遇到console.log（2）时，直接执行，因为这是同步的，所以输出2，遇到queueMicrotask（）函数时，直接放入微任务队列，接下来遇到最后一个Promise函数，同样，将Promise.then的回调函数放入微任务队列中，随后我们看微任务队列，执行微任务队列里边的函数，首先输出”then1”(第一个Promise.then的回调输出)，然后执行queueMicrotask（）函数（输出”queueMicrotask1”），随后输出”then3”（第二个Promise.then的回调输出），这时微任务队列执行完成，开始执行宏任务队列，执行第一个setTimeout函数，输出”set1”,同样遇到Promise.then的回调函数时，放入微任务队列，分别先后输出”then2”和”then4”，最后，执行最后一个setTimeout函数，输出”set2”,到此，全部输出完毕。</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ff5c6a4247c4d1ead61412814ba12ca~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><strong>如图，浏览器中的执行结果跟我们输出的结果一致。</strong></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol><li>浏览器的任务队列分为微任务队列和宏任务队列</li><li>微任务队列优先于宏任务队列执行</li><li>在每一次执行完一个宏任务后，浏览器就会检查微任务队列是否有任务</li><li>宏任务执行之前，必须保证微任务队列是空的；如果不为空，那么就先执行微任务队列中的任务（回调）</li><li>常见的微任务有Promise.then（）的回调、Mutation Observer API、queueMicrotask（）</li><li>常见的宏任务有Event（监听事件）、setTimeout、setInterval、（ajax callback）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;由于Javascript是单线程执行，所以有同步和异步的概念，正因为有同步和异步的概念，所以需要单线程逐步执行同步和异步的事件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript执行时，同步按顺序执行，遇到异步函数则会放到异步队列中等待执</summary>
      
    
    
    
    <category term="前端" scheme="http://1in.ink:4000/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="http://1in.ink:4000/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS模块化引入的实质与使用</title>
    <link href="http://1in.ink:4000/2023/03/01/CommonJS%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%95%E5%85%A5%E7%9A%84%E5%AE%9E%E8%B4%A8%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://1in.ink:4000/2023/03/01/CommonJS%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%95%E5%85%A5%E7%9A%84%E5%AE%9E%E8%B4%A8%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2023-03-01T12:43:00.000Z</published>
    <updated>2023-05-28T11:57:54.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>在Javascript的ES6没有推出时，在社区中推出了很多模块化的规范，其中有AMD、CMD、CommonJS，如今AMD、CMD规范的使用已经很少了，CommonJS与ES6模块化的使用非常常见，那么CommonJS与ES6模块化的引用实质具体是什么呢？</strong></p><h2 id="CommonJS的使用与实质"><a href="#CommonJS的使用与实质" class="headerlink" title="CommonJS的使用与实质"></a>CommonJS的使用与实质</h2><p><strong>Node.js中使用的就是CommonJS的模块化规范，下面，我将以Node.js的代码，演示如何使用CommonJS</strong></p><h3 id="CommonJS如何导出"><a href="#CommonJS如何导出" class="headerlink" title="CommonJS如何导出"></a>CommonJS如何导出</h3><p><strong>CommonJS的导出方法主要有两种，一种为exports&#x3D;{}，另一种为module.exports&#x3D;{}</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name=<span class="string">&quot;1in&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以直接对exports对象进行赋值</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">name</span>=name</span><br></pre></td></tr></table></figure><p><strong>以上使用exports对象直接导出，下面我们来看看用module.exports对象导出的方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name=<span class="string">&quot;1in&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">name</span>:name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以使用ES6中的对象简写方法</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以直接对module.exports对象进行赋值</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">name</span>=name</span><br></pre></td></tr></table></figure><p><strong>根据上边的代码我们可以发现，为什么exports和module.exports的导出方法一模一样呢，那为什么还需要设置两种的导出方法。</strong></p><p><strong>实际上，Node.js在底层实现中，有 module.exports&#x3D;exports 这行代码，Node.js在模块间实际导出的是module.exports，而exports的对象引用是赋值给module.exports的</strong></p><p><strong>所以，当我们用到module.exports导出时，不可以在用exports导出了，因为一旦使用module.exports&#x3D;{name:name} exports就不会将对象地址赋值给module.exports了。又因为module.exports才是真正导出的方法，所以，module.exports指向哪个地址，哪个地址的对象就会被导出</strong></p><p><strong>那么为什么会有一个exports导出方法呢，实际上，Node.js是为了符合CommonJS的规范，设定了一个exports的导出方法。</strong></p><h3 id="CommonJS的导入"><a href="#CommonJS的导入" class="headerlink" title="CommonJS的导入"></a>CommonJS的导入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name &#125;=<span class="built_in">require</span>(<span class="string">&quot;./demo.js&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>当我们exports什么没有都没有导出时，exports就是一个空对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>=&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span>)</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7af6aa3688e540c1900f7304859e3752~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>所以每一个模块中都会有一个exports全局对象，默认为空对象，exports指向一个对象，就意味，Node.js在内存里开辟一个新的空间，这个空间就是exports和module.exports指向的空间，当给exports和module.exports对象赋值是，就相当于给这个开辟的空间赋值，所以，另一个的模块能够获取引入别的模块导出的值，就是因为require也指向这个空间，并从里边取值。</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9909822cfcac45d3965a2c454e0658dc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>所以，当一个模块导出用exports或者module.exports导出后，设置一个定时器，更改name的值，会导致require接收到的值改变吗？</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name=<span class="string">&#x27;1in&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">name</span>=name</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    name=<span class="string">&#x27;1lin-----&#x27;</span></span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//demo2.js</span><br><span class="line"></span><br><span class="line">const &#123;name&#125; =require(&#x27;./demo&#x27;)</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">    console.log(&quot;两秒后重新读取&quot;)</span><br><span class="line">    console.log(name)</span><br><span class="line">&#125;,2000)</span><br><span class="line"></span><br><span class="line">console.log(name)</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2fc16c1aac94b35b0ba547aaa1f3cc1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><strong>那么我们将name设置成一个对象导出呢?</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name= &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;1in&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    name.<span class="property">name</span>=<span class="string">&#x27;1lin-----&#x27;</span></span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">name</span>=name</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo2.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name&#125; =<span class="built_in">require</span>(<span class="string">&quot;./demo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;两秒后重新读取&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">name</span>)</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cce9e6f06d60486cb95969dac14e6a0c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>当我们导出的是一个对象时，导出后，可以利用地址找到这个对象并修改这个对象的属性，就导致了第二种结果，当导出的数据为基本数据类型时，我们没有对应的指针，就无法修改这个导出的值。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在Javascript的ES6没有推出时，在社区中推出了很多模块化的规范，其中有AMD、CMD、CommonJS，如今AMD</summary>
      
    
    
    
    <category term="后端" scheme="http://1in.ink:4000/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Node.js" scheme="http://1in.ink:4000/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>H5端中遇到的手势滑动问题——封装useSwipe Hooks</title>
    <link href="http://1in.ink:4000/2023/02/21/useSwiper/"/>
    <id>http://1in.ink:4000/2023/02/21/useSwiper/</id>
    <published>2023-02-21T12:24:00.000Z</published>
    <updated>2023-05-28T11:39:04.292Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在做H5端页面时，避免不了遇到手势滑动问题，就此问题，我封装了一个Hooks（useSwipe）来解决这个问题，下面，我将一步步讲解useSwipe的封装过程</strong></p><p><strong>下述源码引用了部分Vue的核心API，用Jsx语法编写</strong><br><strong>全部代码均为TypeScript编写</strong></p><h2 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, onMounted,onUnmounted,<span class="title class_">Ref</span>,ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span>=&#123;</span><br><span class="line">    <span class="attr">x</span>:<span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">y</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Options</span>&#123;</span><br><span class="line">    beforeStart?:<span class="function">(<span class="params">e:TouchEvent</span>)=&gt;</span> <span class="built_in">void</span></span><br><span class="line">    beforeMove?:<span class="function">(<span class="params">e:TouchEvent</span>)=&gt;</span> <span class="built_in">void</span></span><br><span class="line">    beforeEnd?:<span class="function">(<span class="params">e:TouchEvent</span>)=&gt;</span> <span class="built_in">void</span></span><br><span class="line">    afterStart?:<span class="function">(<span class="params">e:TouchEvent</span>)=&gt;</span> <span class="built_in">void</span></span><br><span class="line">    afterMove?:<span class="function">(<span class="params">e:TouchEvent</span>)=&gt;</span> <span class="built_in">void</span></span><br><span class="line">    afterEnd?:<span class="function">(<span class="params">e:TouchEvent</span>)=&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useSwipe</span>=(<span class="params">element:Ref&lt;HTMLElement | <span class="literal">undefined</span>&gt;,options?:Options</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> start =ref&lt;<span class="title class_">Point</span>&gt;()</span><br><span class="line">    <span class="keyword">const</span> end =ref&lt;<span class="title class_">Point</span>&gt;()</span><br><span class="line">    <span class="keyword">const</span> swipeing=<span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> distance=<span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!start.<span class="property">value</span> || !end.<span class="property">value</span>)&#123; <span class="keyword">return</span> <span class="literal">undefined</span>&#125;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">x</span>:end.<span class="property">value</span>.<span class="property">x</span>-start.<span class="property">value</span>.<span class="property">x</span>,</span><br><span class="line">            <span class="attr">y</span>:end.<span class="property">value</span>.<span class="property">y</span>-start.<span class="property">value</span>.<span class="property">y</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> direction=<span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!swipeing.<span class="property">value</span>)&#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">if</span>(!distance.<span class="property">value</span>)&#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">const</span> &#123; x , y &#125; =distance.<span class="property">value</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(x)&gt;<span class="title class_">Math</span>.<span class="title function_">abs</span>(y))&#123;</span><br><span class="line">            <span class="keyword">return</span> x&gt;<span class="number">0</span>? <span class="string">&quot;right&quot;</span> : <span class="string">&quot;left&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> y&gt;<span class="number">0</span>? <span class="string">&quot;down&quot;</span> : <span class="string">&quot;up&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onStart</span>=(<span class="params">e:TouchEvent</span>)=&gt;&#123;</span><br><span class="line">        options?.<span class="property">beforeStart</span>?.(e)</span><br><span class="line">        start.<span class="property">value</span>=&#123;</span><br><span class="line">            <span class="attr">x</span>:e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>,</span><br><span class="line">            <span class="attr">y</span>:e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span></span><br><span class="line">        &#125;</span><br><span class="line">        options?.<span class="property">afterStart</span>?.(e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onMove</span>=(<span class="params">e:TouchEvent</span>)=&gt;&#123;</span><br><span class="line">        options?.<span class="property">beforeMove</span>?.(e)</span><br><span class="line">        end.<span class="property">value</span>=&#123;</span><br><span class="line">            <span class="attr">x</span>:e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>,</span><br><span class="line">            <span class="attr">y</span>:e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span></span><br><span class="line">        &#125;</span><br><span class="line">        swipeing.<span class="property">value</span>=<span class="literal">true</span></span><br><span class="line">        options?.<span class="property">afterMove</span>?.(e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onEnd</span>=(<span class="params">e:TouchEvent</span>)=&gt;&#123;</span><br><span class="line">        options?.<span class="property">beforeEnd</span>?.(e)</span><br><span class="line">        swipeing.<span class="property">value</span>=<span class="literal">false</span></span><br><span class="line">        options?.<span class="property">afterEnd</span>?.(e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        element.<span class="property">value</span>?.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>,onStart)</span><br><span class="line">        element.<span class="property">value</span>?.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>,onMove)</span><br><span class="line">        element.<span class="property">value</span>?.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>,onEnd)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        element.<span class="property">value</span>?.<span class="title function_">removeEventListener</span>(<span class="string">&quot;touchstart&quot;</span>,onStart)</span><br><span class="line">        element.<span class="property">value</span>?.<span class="title function_">removeEventListener</span>(<span class="string">&quot;touchmove&quot;</span>,onMove)</span><br><span class="line">        element.<span class="property">value</span>?.<span class="title function_">removeEventListener</span>(<span class="string">&quot;touchend&quot;</span>,onEnd)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        swipeing ,distance,direction </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><p><strong>1. 当用户点击屏幕时，记录此时点击的屏幕坐标，当用户移动时，记录移动过程中的屏幕坐标，最后做差，即可判别用户的滑动行为</strong><br><strong>2. 同时需要return出相应的参数，例如distance（屏幕坐标的差值）、direction（用户的滑动行为）、swipeing（用户是否在滑动中）</strong></p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p><strong>首先我们得声明记录屏幕坐标的类型Point，Point类型中有x坐标和y坐标，均为number类型，代码如下</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span>=&#123;<span class="attr">x</span>:<span class="built_in">number</span>,<span class="attr">y</span>:<span class="built_in">number</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>接下来，useSwipe函数需要接受那些参数呢？这个时候，我们就要明白，useSwipe是指定用户在规定的DOM元素中的手势滑动行为，所以useSwipe需要接受一个HTML元素，我们也可以规定一个不定参数去接收对应的函数，去增加useSwipe的可扩展性。</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">useSwipe</span>=(<span class="params">element:Ref&lt;HTMLElement | <span class="literal">undefined</span>&gt;,options?:Options</span>)=&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>注意！我们这里element接收的是一个ref类型，所以我们传入的DOM元素必须绑定ref并传入，此时element的类型也有可能undefined，因为你所传入的ref也有可能没有绑定DOM元素，这里的options是一个对象，里边可以传入六个不定函数，分别为beforeStart、beforeMove、beforeEnd、afterStart、afterMove、afterEnd，这六个参数分别在用户开始滑动、滑动中、滑动结束的前后调用，函数具体内容可自定义。所以，此时我们要声明一下options的类型。</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Options</span>&#123;</span><br><span class="line">    beforeStart?:<span class="function">(<span class="params">e:TouchEvent</span>)=&gt;</span> <span class="built_in">void</span></span><br><span class="line">    beforeMove?:<span class="function">(<span class="params">e:TouchEvent</span>)=&gt;</span> <span class="built_in">void</span></span><br><span class="line">    beforeEnd?:<span class="function">(<span class="params">e:TouchEvent</span>)=&gt;</span> <span class="built_in">void</span></span><br><span class="line">    afterStart?:<span class="function">(<span class="params">e:TouchEvent</span>)=&gt;</span> <span class="built_in">void</span></span><br><span class="line">    afterMove?:<span class="function">(<span class="params">e:TouchEvent</span>)=&gt;</span> <span class="built_in">void</span></span><br><span class="line">    afterEnd?:<span class="function">(<span class="params">e:TouchEvent</span>)=&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接下来，我们可以开始具体实现useSwipe了，首先，我们得声明一下记录用户起始坐标和记录用户移动过程中坐标以及记录用户是否在移动的变量。</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> start =ref&lt;<span class="title class_">Point</span>&gt;()</span><br><span class="line"><span class="keyword">const</span> end =ref&lt;<span class="title class_">Point</span>&gt;()</span><br><span class="line"><span class="keyword">const</span> swipeing=<span class="title function_">ref</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p><strong>有了记录的变量之后，就可以给element添加事件，touchstart、touchmove、touchend，当用户touchstart时，记录用户的起始坐标，并将swipeing置为true，当用户touchmove时，记录用户的移动坐标，当用户touchend时，将swipeing置为false。并在执行这些代码前后分别执行可自定义的options中的函数</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onStart</span>=(<span class="params">e:TouchEvent</span>)=&gt;&#123;</span><br><span class="line">    options?.<span class="property">beforeStart</span>?.(e)</span><br><span class="line">    start.<span class="property">value</span>=&#123;</span><br><span class="line">        <span class="attr">x</span>:e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>,</span><br><span class="line">        <span class="attr">y</span>:e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span></span><br><span class="line">    &#125;</span><br><span class="line">    options?.<span class="property">afterStart</span>?.(e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onMove</span>=(<span class="params">e:TouchEvent</span>)=&gt;&#123;</span><br><span class="line">    options?.<span class="property">beforeMove</span>?.(e)</span><br><span class="line">    end.<span class="property">value</span>=&#123;</span><br><span class="line">        <span class="attr">x</span>:e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>,</span><br><span class="line">        <span class="attr">y</span>:e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span></span><br><span class="line">    &#125;</span><br><span class="line">    swipeing.<span class="property">value</span>=<span class="literal">true</span></span><br><span class="line">    options?.<span class="property">afterMove</span>?.(e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onEnd</span>=(<span class="params">e:TouchEvent</span>)=&gt;&#123;</span><br><span class="line">    options?.<span class="property">beforeEnd</span>?.(e)</span><br><span class="line">    swipeing.<span class="property">value</span>=<span class="literal">false</span></span><br><span class="line">    options?.<span class="property">afterEnd</span>?.(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接下来就可以把对应的事件绑定到element DOM元素上,此时我们需要Vue中的onMounted钩子（当DOM元素全部挂载到页面上时，绑定监听事件）</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        element.<span class="property">value</span>?.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>,onStart)</span><br><span class="line">        element.<span class="property">value</span>?.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>,onMove)</span><br><span class="line">        element.<span class="property">value</span>?.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>,onEnd)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><strong>有了start坐标以及end坐标后，我们可以继续封装distance以及direction函数。</strong></p><p><strong>distance和direction函数均用Vue中的computed方法去管理return出的值。</strong></p><p><strong>distance函数，根据end和start对应的x坐标和y坐标做差即可得出distance，distance的类型也为Point，内含x坐标和y坐标</strong></p><p><strong>direction函数，根据做差后的x值和y值作比较，分别判断出用户是左右滑动还是上下滑动，判断出上下滑动还是水平滑动后，通过正负值判断出方向。因为direction是在滑动过程中去判断出方向，所以我们通过swipeing变量防止没有滑动时direction去判断方向</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> distance=<span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!start.<span class="property">value</span> || !end.<span class="property">value</span>)&#123; <span class="keyword">return</span> <span class="literal">undefined</span>&#125;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">x</span>:end.<span class="property">value</span>.<span class="property">x</span>-start.<span class="property">value</span>.<span class="property">x</span>,</span><br><span class="line">        <span class="attr">y</span>:end.<span class="property">value</span>.<span class="property">y</span>-start.<span class="property">value</span>.<span class="property">y</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> direction=<span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!swipeing.<span class="property">value</span>)&#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span>(!distance.<span class="property">value</span>)&#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; x , y &#125; =distance.<span class="property">value</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(x)&gt;<span class="title class_">Math</span>.<span class="title function_">abs</span>(y))&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;<span class="number">0</span>? <span class="string">&quot;right&quot;</span> : <span class="string">&quot;left&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y&gt;<span class="number">0</span>? <span class="string">&quot;down&quot;</span> : <span class="string">&quot;up&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>最后，需要在DOM元素销毁后，移除绑定的监听事件</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        element.<span class="property">value</span>?.<span class="title function_">removeEventListener</span>(<span class="string">&quot;touchstart&quot;</span>,onStart)</span><br><span class="line">        element.<span class="property">value</span>?.<span class="title function_">removeEventListener</span>(<span class="string">&quot;touchmove&quot;</span>,onMove)</span><br><span class="line">        element.<span class="property">value</span>?.<span class="title function_">removeEventListener</span>(<span class="string">&quot;touchend&quot;</span>,onEnd)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;在做H5端页面时，避免不了遇到手势滑动问题，就此问题，我封装了一个Hooks（useSwipe）来解决这个问题，下面，我将一步步讲解useSwipe的封装过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下述源码引用了部分Vue的核心API，用Jsx语法</summary>
      
    
    
    
    <category term="前端" scheme="http://1in.ink:4000/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="http://1in.ink:4000/tags/Vue/"/>
    
    <category term="Mobile" scheme="http://1in.ink:4000/tags/Mobile/"/>
    
  </entry>
  
</feed>
